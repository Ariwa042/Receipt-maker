# Generated by Django 4.2 on 2025-06-06 21:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BankReceiptTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('first_bank', 'First Bank of Nigeria'), ('chase_bank', 'Chase Bank'), ('paypal', 'PayPal')], max_length=20)),
                ('xp_cost', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'BANK Template',
                'verbose_name_plural': 'BANK Templates',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the country (e.g., Nigeria, United States)', max_length=100, unique=True)),
                ('currency_name', models.CharField(help_text='Name of the currency used in the country (e.g., Naira, Dollar)', max_length=50)),
                ('currency_symbol', models.CharField(help_text='Symbol of the currency (e.g., â‚¦, $)', max_length=10)),
                ('currency_code', models.CharField(help_text='ISO code of the currency (e.g., NGN for Naira, USD for Dollar)', max_length=10, unique=True)),
            ],
            options={
                'verbose_name': 'Country and Currency',
                'verbose_name_plural': 'Countries and Currencies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CryptoCurrency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('symbol', models.CharField(max_length=10, unique=True)),
            ],
            options={
                'verbose_name': 'Cryptocurrency',
                'verbose_name_plural': 'Cryptocurrencies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CryptoNetwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the crypto network (e.g., Ethereum, Binance Smart Chain, Solana)', max_length=100, unique=True)),
                ('symbol', models.CharField(help_text='Symbol of the crypto network (e.g., ETH(ERC20), BSC(BEP20), SOL, XRP)', max_length=10, unique=True)),
            ],
            options={
                'verbose_name': 'Crypto Network',
                'verbose_name_plural': 'Crypto Networks',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExchangeReceiptTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('binance', 'Binance'), ('coinbase', 'Coinbase'), ('kraken', 'Kraken'), ('bitfinex', 'Bitfinex'), ('bitstamp', 'Bitstamp'), ('kucoin', 'KuCoin'), ('gate_io', 'Gate.io'), ('huobi', 'Huobi Global'), ('okex', 'OKEx')], max_length=20)),
                ('xp_cost', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Exchange Template',
                'verbose_name_plural': 'Exchange Templates',
            },
        ),
        migrations.CreateModel(
            name='WithdrawalCryptoReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=8, help_text='Amount of cryptocurrency involved in the transaction', max_digits=20)),
                ('amount_in_usd', models.DecimalField(decimal_places=2, help_text='Equivalent amount in USD at the time of the transaction', max_digits=20)),
                ('withdrawal_address', models.CharField(help_text="The recipient's wallet address", max_length=255)),
                ('network_fee', models.DecimalField(decimal_places=8, max_digits=20)),
                ('transaction_id', models.CharField(help_text='Unique identifier for the transaction', max_length=100, unique=True)),
                ('transaction_date', models.DateTimeField(help_text='Date and time when the transaction occurred')),
                ('receipt_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('reversed', 'Reversed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('currency', models.ForeignKey(help_text='The cryptocurrency involved in the transaction', on_delete=django.db.models.deletion.CASCADE, to='receipts.cryptocurrency')),
                ('exchange', models.ForeignKey(help_text='The exchange platform used for the transaction', on_delete=django.db.models.deletion.CASCADE, to='receipts.exchangereceipttemplate')),
                ('network', models.ForeignKey(help_text='The network on which the transaction occurred', on_delete=django.db.models.deletion.CASCADE, to='receipts.cryptonetwork')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crypto_receipts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Crypto Receipt',
                'verbose_name_plural': 'Crypto Receipts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DepositCryptoReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exchange', models.CharField(choices=[('binance', 'Binance'), ('coinbase', 'Coinbase'), ('kraken', 'Kraken'), ('bitfinex', 'Bitfinex'), ('bitstamp', 'Bitstamp'), ('kucoin', 'KuCoin'), ('gate_io', 'Gate.io'), ('huobi', 'Huobi Global'), ('okex', 'OKEx')], help_text='The exchange platform used for the transaction', max_length=50)),
                ('amount', models.DecimalField(decimal_places=8, help_text='Amount of cryptocurrency involved in the transaction', max_digits=20)),
                ('amount_in_usd', models.DecimalField(decimal_places=2, help_text='Equivalent amount in USD at the time of the transaction', max_digits=20)),
                ('deposit_address', models.CharField(help_text="The recipient's wallet address", max_length=255)),
                ('network_fee', models.DecimalField(decimal_places=8, max_digits=20)),
                ('transaction_id', models.CharField(help_text='Unique identifier for the transaction', max_length=100, unique=True)),
                ('transaction_date', models.DateTimeField(help_text='Date and time when the transaction occurred')),
                ('receipt_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('reversed', 'Reversed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('currency', models.ForeignKey(help_text='The cryptocurrency involved in the transaction', on_delete=django.db.models.deletion.CASCADE, to='receipts.cryptocurrency')),
                ('network', models.ForeignKey(help_text='The network on which the transaction occurred', on_delete=django.db.models.deletion.CASCADE, to='receipts.cryptonetwork')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deposit_crypto_receipts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Crypto Deposit Receipt',
                'verbose_name_plural': 'Crypto Deposit Receipts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DebitBankReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sender_name', models.CharField(blank=True, help_text='Please type in the correct name in full', max_length=255, null=True)),
                ('sender_account_number', models.CharField(blank=True, help_text='Please type in the correct account number in full', max_length=20, null=True)),
                ('beneficiary_name', models.CharField(blank=True, help_text='Please type in the correct name in full', max_length=255, null=True)),
                ('beneficiary_account_number', models.CharField(blank=True, help_text='Please type in the correct account number in full', max_length=20, null=True)),
                ('beneficiary_bank', models.CharField(blank=True, help_text='Please type in the correct bank name in full', max_length=50, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('receipt_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('reversed', 'Reversed')], default='pending', max_length=20)),
                ('transaction_date', models.DateTimeField()),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('session_id', models.CharField(max_length=100, unique=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('country', models.ForeignKey(help_text='Country where the transaction is taking place', on_delete=django.db.models.deletion.CASCADE, to='receipts.country')),
                ('sender_bank', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='receipts.bankreceipttemplate')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_receipts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': ' Deposit Bank Receipt',
                'verbose_name_plural': 'Deposit Bank Receipts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CreditBankReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('beneficiary_name', models.CharField(blank=True, help_text='Please type in your name in full', max_length=255, null=True)),
                ('beneficiary_account_number', models.CharField(blank=True, help_text='Please type in your account number in full', max_length=20, null=True)),
                ('sender_bank', models.CharField(blank=True, help_text='Ensure the bank name is written correctly', max_length=50, null=True)),
                ('sender_name', models.CharField(blank=True, help_text='Please type in the correct name in full', max_length=255, null=True)),
                ('sender_account_number', models.CharField(blank=True, help_text='Please type in the correct account number in full', max_length=20, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('receipt_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('reversed', 'Reversed')], default='pending', max_length=20)),
                ('transaction_date', models.DateTimeField()),
                ('transaction_id', models.CharField(max_length=100, unique=True)),
                ('session_id', models.CharField(max_length=100, unique=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('beneficiary_bank', models.ForeignKey(help_text='this will be the bank template that will be used', on_delete=django.db.models.deletion.CASCADE, to='receipts.bankreceipttemplate')),
                ('country', models.ForeignKey(help_text='Country where the transaction is taking place', on_delete=django.db.models.deletion.CASCADE, to='receipts.country')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='credit_bank_receipts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': ' Credit Bank Receipt',
                'verbose_name_plural': 'Credit Bank Receipts',
                'ordering': ['-created_at'],
            },
        ),
    ]
